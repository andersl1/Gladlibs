using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.SceneManagement;
using TMPro;

public class PromptForUserBlanks : MonoBehaviour
{
    public Text timer;
    private float time;
    private int displayedTime;
    public TMP_InputField giveNewWord;
    public TMP_Text givePOS;
    private int indexOfReplacement;
    private int indexOfBlank;
    private int z;
    private string[] libBlank;
    private string stringToShow;
    private int doOnce;

    // While the game is playing: for every prompt for part of speech, the user is given 10 seconds to respond.
    // during that time, the timer will decrease. The displayed time will be an int because it is easier for
    // the user to read. If they reach a time of zero, send them to the game over screen.
    private void Update()
    {
        displayedTime = (int)time;
        timer.text = displayedTime.ToString();
        if (time > 0)
        {
            time -= Time.deltaTime;
        }
        else
        {
            SceneManager.LoadScene(12);
        }

    }

    // Variables are initialized to determine the number of blanks generated from the user's input madlib text.
    private void Start() 
    {
        indexOfReplacement = 1;
        indexOfBlank = 0;
        z = 0;
        doOnce = 0;

        // Test for user logged in
        if (DataManager.LoggedIn)
        {
            // Variable to retreive the words from within the blanks of the madlib generated by ShowTheMadlib
            libBlank = DataManager.lastLibWithBlanks.Split(' ');
            indexOfReplacement = 0;

            for (int i = 0; i < DataManager.lastLibBlankIndicies.Length; i++)
            {
                z++;
            }

            // Z is used to test if there are no more prompts: testing z with IndexOfReplacement will determine if this process should finish.
            // Time is also initialized to 10 seconds.
            z = z - 1;
            givePOS.text = DataManager.lastLibPOS[indexOfReplacement];
            time = 10f;
        }
        else
        {
            SceneManager.LoadScene(0);
        }
    }

    // Initialize time to 10 so long as there are more prompts. 
    // When the user presses enter, we must put the word that they typed back into the string with the blanks generated. 
    // The part of speech should also change so that the user knows what to type in 
    public void OnEnter()
    {
        if (indexOfReplacement <= z)
        {
            time = 10f;

            // The POS shown to the user
            stringToShow = giveNewWord.text;
            int libEndOfBlank = 0;
            int x = 1;

            // This variable is to test if the word previously at that index had punctuation following it. 
            string replaceEnd = null;

            // Get the last index of the string that is currently being replaced to test if it is followed by punctuation.
            indexOfBlank = DataManager.lastLibBlankIndicies[indexOfReplacement];
            libEndOfBlank = libBlank[indexOfBlank].Length;

            // If the end is not a blank, then there is punctuation, so add it to the string that the user gave. 
            if (libBlank[indexOfBlank][libEndOfBlank - 1].ToString() != "_")
            {
                do
                {
                    replaceEnd += libBlank[indexOfBlank][libEndOfBlank - x].ToString();
                    x++;
                }
                while (libBlank[indexOfBlank][libEndOfBlank - x].ToString() != "_");
            }

            // Since replaceEnd is always initially set to null, test if it is null to determine whether or not to add punctuation.
            if (replaceEnd != null)
            {
                giveNewWord.text += replaceEnd;
            }

            // Replace the word at the index of the blank
            libBlank[indexOfBlank] = libBlank[indexOfBlank].Replace(libBlank[indexOfBlank], giveNewWord.text);
           
            indexOfReplacement++;

            // If there are more prompts, keep going. Otherwise, go onto the next page to display the madlib that they've generated.
            if (indexOfReplacement <= z)
            {
                givePOS.text = DataManager.lastLibPOS[indexOfReplacement];
            }
            else
            {
                givePOS.text = "Next page!";

                for (int i = 0; i < libBlank.Length; i++)
                {
                    DataManager.newLib += libBlank[i] + " ";
                }

                SceneManager.LoadScene(8);
            }

            giveNewWord.text = null;
        }

        if (giveNewWord.text != null)
        {
            giveNewWord.text = null;
        }

        // Automatically activate the input field after the user types in a word so that this process is quicker.
        giveNewWord.ActivateInputField();
        giveNewWord.caretPosition = 1;
    }
    

    // If the input field was not activated at line 130, activate it when the user types another letter on his/her keyboard.
    public void OnValueChanged()
    {
        if (Input.anyKey)
        {
            giveNewWord.text = null;
            giveNewWord.ActivateInputField();
            giveNewWord.caretPosition = 1;
        }
    }
}
